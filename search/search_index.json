{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GNPS2 Documentation","text":"<p>GNPS2 is a web-based mass spectrometry ecosystem that aims to be an open-source and open-access knowledge base for community-wide organization and sharing of raw, processed or identified tandem mass (MS/MS) spectrometry data. GNPS2 aids in identification and discovery throughout the entire life cycle of data; from initial data acquisition/analysis to post publication.</p> <p>As there are many aspects to GNPS, it can be a bit overwhelming. Here is a quick description of main functionalities:</p> <ol> <li>Computational Workflows for the Analysis of Mass Spectrometry Data</li> <li>Interactive Visualizations of Mass Spectrometry Data and Results</li> <li>Mass Spectrometry Knowledgebase Curation</li> <li>Big Data Integration and Visualization</li> </ol>"},{"location":"accounts/","title":"Accounts","text":""},{"location":"accounts/#account-creation","title":"Account Creation","text":"<p>To create an account, you'll need to reach out to Ming for him to create them for you at the moment. GNPS2 is in slow closed beta to make sure everything is working properly and is slowly ramping up for community use. Thank you for your patience!</p>"},{"location":"community/","title":"Join the GNPS2 community","text":"<p>The GNPS2 community is always welcoming suggestions and contributions. Be part of the community and contribute!</p>"},{"location":"community/#gnps-forum","title":"GNPS Forum","text":"<p>Discussions and suggestions can also take place on the GNPS/GNPS2 forum at https://groups.google.com/forum/#!forum/molecular_networking_bug_reports.</p>"},{"location":"community/#updating-the-gnps2-documentation-quick","title":"Updating the GNPS2 Documentation (Quick)","text":"<p>We'd love for the community to add, edit, and improve the documentation so it'll be even more helpful for everyone. You can even see all the contributors for each page at the bottom, so it's totally a community effort. To make things simpler, here is the step by step on how to edit the documentation. </p> <p>Make a GitHub Account </p> <p>You'll need to make a GitHub Account.</p> <p>Click Edit Button on Page You Want to Edit</p> <p></p> <p>Fork the Repository When Prompted (only the first time)</p> <p></p> <p>Make the Edits in MarkDown</p> <p></p> <p>Propose Changes</p> <p>Please describe the change you are making. </p> <p></p> <p>Create Pull Request</p> <p></p> <p>Finalize Pull Request with Description</p> <p></p>"},{"location":"community/#page-contributors","title":"Page Contributors","text":"<p>{{ git_page_authors }}</p>"},{"location":"fileupload/","title":"File Upload","text":"<p>File uploads are handled all via the browser. </p> <p>Go ahead and login and click the \"File Broswer\" in the top right. You will be able to drag and drop. However, be warned that you cannot upload files directly to the root of your user. You will need to make a new folder first. </p>"},{"location":"idbac/","title":"IDBac Documentation","text":"<p>1) Convert raw autoExecute data to mzML via MSConvert.</p> <p>a) Select browse to  your Bruker FID file by clicking 'Browse'</p> <p>b) Click 'Add' to submit your file to the conversion cue</p> <p>c) Select where you would like your file to be saved under \"Output Directory\"</p> <p>d) Ensure mzML is selected under 'Options/Output format'</p> <p>e) When the previous steps are completed, click 'Start'</p> <p></p> <p></p> <p>2) Upload your converted mzML file along with a MALDI plate map labeled with your isolate IDs (CSV or XLSX) to \"File Browser\" found on the GNPS2.org homepage. </p> <p></p> <p></p> <p>3) IDBac_split_MALDI Workflow submission (https://gnps2.org/workflowinput?workflowname=idbac_split_maldi_workflow): Select your autoExecute mzML and plate map from the drop down menu. The output of this workflow is individual, labeled mzML files based on MALDI well-position. </p> <p></p> <p>4) Once this workflow is completed, you will be provided with two options:    </p> <p>a) IDBac Analyisis: Analyze spectra within your dataset indepedently, or by comparing against the IDBac database (See below for full analysis options).    </p> <p>b) IDBac Database Deposition: Deposit your spectra and metadata into the IDBac database </p> <p>IDBac Analysis Options: Within this workflow you have the ability to analyze your data through:</p> <p></p> <p>a) Vizualize dendrogram: View dendrogram of your data (excluding database seeds).</p> <p>b) Visualize with Metadata: If you selected a metadata colum to display, it will appear within the dendrogram here. </p> <p>c) Spectra summary: This option allows you to compare mirror plots of your spectra.</p> <p>d) Dendrogram similarity: You may view similarity scores between your isolates based onthe similarity metric you chose in the analysis workflow submission.       </p> <p>e) Database Search Summary: Here you can identify which database seeds that your        isolates matched with, based on similairty scores.</p>"},{"location":"status/","title":"Server Status","text":"<p>Here we can see the status of the GNPS2 Infrastructure ecosystem. </p>"},{"location":"status/#uptime-monitoring","title":"Uptime Monitoring","text":"<p>Here is a quick dashboard for the uptime monitoring meant to give an at the glance understanding which servers are up and running but do not give you detailed information about funcionality. </p> <p>Uptime Monitoring</p>"},{"location":"status/#integration-testing","title":"Integration Testing","text":"<p>These are detailed server status tests for functionality:</p> Server Status GNPS2 - Structure GNPS2 - Cytoscape GNPS2 - NP Classifier"},{"location":"status/#workflow-testing","title":"Workflow Testing","text":"<p>TODO: Add all the workflow testing monitoring</p>"},{"location":"toolindex/","title":"GNPS2 Tool Index","text":"<p>This is a global tool index for GNPS2. Throughout this documentation we have very detailed information for how to use way more tools than we though we'd have, but its a good problem to have!</p> <p>However, we recognize it might be difficult for people to simply see what all is availble in GNPS as tool and web services. This table is always evolving and hope to make it easier for people to navigate. </p> <p>Please help us fill in more completely!</p>"},{"location":"toolindex/#gnps2-web-tools","title":"GNPS2 Web Tools","text":"<p>These are web tools that is run by the GNPS2 team and provides complementary funcationality to GNPS2. </p> Tool Documentation Source Code Citation Pubmed Co-Authors List --- --- Nature Journals Author Quick Entry --- --- GNPS2 Spectral Similarity Hub --- --- GNPS2 Structure Server --- --- GNPS2 Cytoscape --- --- Metabolomics Spectrum Resolver Documentation GitHub Citation GNPS2 Networking URL Formatter --- --- GNPS2 Classical Networking Upset Plot Dashboard --- GitHub --- GNPS2 FBMN Upset Plot Dashboard --- --- NP Classifier --- GitHub --- GNPS2 Dashboard --- --- GNPS2 Plotter Dashboard (Beta) --- --- GNPS2 Dataset File Explorer (Beta) --- --- GNPS2 Public Libraries Download List --- --- GNPS2 Spectral Similarity Hub --- --- GNPS2 Tiny Mass Sharer --- ---"},{"location":"toolindex/#gnps2-jupyter-notebooks","title":"GNPS2 Jupyter Notebooks","text":"<p>These notebooks are for postprocessing of results from GNPS/GNPS2 and other computational processing that have not be integrated yet. If they are super useful, we can integrate into high throughput workflows. For now, give them a try!</p> Tool Documentation Source Code Binder Launch GNPS2 MASST Post Processing --- GitHub GNPS2 MassQL and Networking Integration --- GitHub GNPS2 Networking Family Consistent Fragmentation --- GitHub GNPS2 MassQL Post Processing --- GitHub CMMC Integration --- GitHub"},{"location":"toolindex/#community-tools-gnps2-interfaces-with","title":"Community Tools GNPS2 Interfaces with","text":"Tool Publication MS2LDA.org Citation NPAtlas Citation MIBiG Citation ClassyFire Citation SMART NMR Citation MassBank Citation Cytoscape Citation ProteoWizard Citation SNAP-MS Citation and Documentation"},{"location":"usi/","title":"GNPS2 USI","text":"<p>In GNPS2, you can also refer to spectra using the Universal Spectrum Identifier. The main resolver can be found at metabolomics-usi.gnps2.org. The format of the USI is as follows:</p> <pre><code>mzspec:GNPS2:TASK-${task}-input_file_folder/${row[\"filename\"]}:scan:${row[\"scan1\"]}\n</code></pre> <p>You can also access the gnps2 native resolver at gnps2.org/dashboards/embedded/resolver/</p>"},{"location":"workflowdev/","title":"GNPS2 Workflow Development","text":""},{"location":"workflowdev/#overview-of-gnps2-workflow-development","title":"Overview of GNPS2 Workflow Development","text":"<p>Here is the template for GNPS2 Workflows, it provides boiler plate for NextFlow and the accompanying yaml files for input and display. There are several distinct steps that we would recommend:</p> <ol> <li>Make a new repository for the GNPS2 workflow that uses this template</li> <li>Make sure you can run the template by having conda and nextflow installed</li> <li>Run the test with <code>make run</code></li> <li>Once your workflow is how you like it in nextflow, you can hook everything up with the workflowinput.yaml file to define the input form. The specifics on each thing are below</li> <li>Update the workflow name so it is unique to your workflow in workflowinput.yaml</li> <li>Update the workflow name for results in workflowresults.yaml</li> <li>To deploy to Dev GNPS2 instance, send Ming your preferred username and public ssh key</li> <li>Prep deployment environment</li> <li>Deploy to GNPS2 Dev instance, see below on how to do that</li> </ol>"},{"location":"workflowdev/#defining-gnps2-workflow-input-yaml","title":"Defining GNPS2 Workflow Input YAML","text":"<p>For each workflow, there is a yml file called: workflowinput.yaml. It requires the following items:</p> <pre><code>workflowname: classic_networking\nworkflowdescription: LC - Classical Molecular Networking\nworkflowlongdescription: Molecular networks ...\nworkflowversion: \"0.1\"\nworkflowfile: workflows.nf\nworkflowautohide: false\nadminonly: true\nparameterlist:\n</code></pre>"},{"location":"workflowdev/#workflow-input-parameters","title":"Workflow Input Parameters","text":"<p>Text Entry</p> <pre><code>    - displayname: Precursor Ion Tolerance\n      paramtype: text\n      nf_paramname: precursor_mass_tolerance\n      formplaceholder: Enter the Precursor Ion Tolerance\n      formvalue: \"2.0\"\n      tooltip: \"Lorem Ipsum\"\n</code></pre> <p>Text Area</p> <pre><code>    - displayname: USI Entry\n      paramtype: textarea\n      nf_paramname: usi_field\n      formplaceholder: Enter USIs\n      formvalue: \"\"\n      rows: 4\n      cols: 50\n</code></pre> <p>Drop Down List</p> <pre><code>    - displayname: Network Generation Mode\n      paramtype: select\n      nf_paramname: cosinemode\n      formvalue: fast\n      options:\n        - value: python\n          display: python\n        - value: fast\n          display: fast\n      options-from-file: options.csv\n      options-from-url:\n        url: https://gnps-external.ucsd.edu/gnpslibrary\n        value-key: \"name\"\n        display-key: \"name\"\n</code></pre> <p>NOTE: For options-from-url, the API expects to return in json format, a list of dictionaries. Each dictionary will have the same keys, and the users can specify the value and display for the keys in the dropdown.</p> <p>Section Header</p> <pre><code>    - displayname: Advanced Network Options\n      paramtype: section\n</code></pre> <p>File Selector</p> <pre><code>    - displayname: Metadata Path\n      paramtype: fileselector\n      nf_paramname: metadata_filename\n      formplaceholder: Enter the path to metadata\n      formvalue: \"\"\n      targettaskfolder: metadata_folder\n      optional: true\n      selectsinglefile: false\n      folderunroll: true\n      linkdata: true\n</code></pre> <ol> <li>optional means that if nothing is selected, it will default the nextflow argument to NO_FILE</li> <li>selectsinglefile means that it will take the first selected file as the nextflow argument rather than the whole folder</li> <li>folderunroll means that we will file all the leaf files and symlink them into the target folder, false means we will simply link the select file or folder as is</li> <li>linkdata means that any linking will happen, by default on, but can turn off in cases where we simply want to specify files and not actually do anything with it beyond the name.</li> </ol>"},{"location":"workflowdev/#workflow-display-parameters","title":"Workflow Display Parameters","text":"<p>Pure Java Script Client Side Tables</p> <pre><code>-   name: Results\n    displayname: Results\n    viewname: results\n    displaytype: datatable\n    parameters:\n        filename: library/results.tsv\n        error_missingfile: \"No File\"\n        columns:\n            -   title: \"Visualize\"\n                data: \n            -   title: \"SpecFile\"\n                data: filename\n        columnDefs: '[ {\"targets\": 0,\"data\": null,\"render\": function ( data, type, row, meta ) {\n        return `\n            &lt;a target=\"_blank\" href=\"https://metabolomics-usi.gnps2.org/dashinterface/?usi1=mzspec:GNPS2:TASK-${task}-input_file_folder/${row[\"filename\"]}:scan:${row[\"scan1\"]}\"&gt;View Spectrum&lt;/a&gt;\n        `;}}]'\n</code></pre> <p>Serverside Tables (Medium Sized)</p> <pre><code>-   name: Results\n    displayname: Results\n    viewname: results\n    displaytype: datatable_server\n    parameters:\n        filename: library/results.tsv\n        error_missingfile: \"No File\"\n        columns:\n            -   title: \"Visualize\"\n                data: \n            -   title: \"SpecFile\"\n                data: filename\n        columnDefs: '[ {\"targets\": 0,\"data\": null,\"render\": function ( data, type, row, meta ) {\n        return `\n            &lt;a target=\"_blank\" href=\"https://metabolomics-usi.gnps2.org/dashinterface/?usi1=mzspec:GNPS2:TASK-${task}-input_file_folder/${row[\"filename\"]}:scan:${row[\"scan1\"]}\"&gt;View Spectrum&lt;/a&gt;\n        `;}}]'\n</code></pre> <p>Serverside Tables (Large Sized - GB+ Size)</p> <pre><code>-   name: Results\n    displayname: Results\n    viewname: results\n    displaytype: datatable_serverbig\n    parameters:\n        filename: library/results.tsv\n        error_missingfile: \"No File\"\n        columns:\n            -   title: \"Visualize\"\n                data: \n            -   title: \"SpecFile\"\n                data: filename\n        columnDefs: '[ {\"targets\": 0,\"data\": null,\"render\": function ( data, type, row, meta ) {\n        return `\n            &lt;img src=\"https://structure.gnps2.org/structureimg?smiles=${row[\"smiles\"]}\"/&gt;\n        `;}}]'\n</code></pre> <p>Linkout</p> <pre><code>-   name: Downstream Analysis - Run Analysis\n    displayname: Downstream Analysis - Run Analysis\n    viewname: downstreamworkflow\n    displaytype: linkout\n    parameters:\n        baseurl: /workflowinput\n        urlparam:\n            -   workflowname:reanalysis_workflow\n        hashparam:\n            -   input_spectra:TASKLOCATION/[task]/input_spectra\n            -   description:Downstream from [task] Molecular Networking\n\n\n-   name: Visualize Heatmap\n    displayname: Visualize Heatmap\n    viewname: visualizeheatmap\n    displaytype: linkout\n    parameters:\n        baseurl: /taskresult/[task]/file/nf_output/output.html\n        urlparam:\n            -   attachment:no\n</code></pre> <p>Here if we want to use the task params in the linkout, simply use the syntax</p> <p><code>[@paramname]</code></p> <p>Download Files</p> <pre><code>-   name: Download PCoA\n    displayname: Download PCoA\n    viewname: poca\n    displaytype: download\n    parameters:\n        filename: pcoa/pcoa.qzv\n</code></pre> <p>Section Division</p> <pre><code>-   name: section\n    displayname: Summary Views\n    viewname: section\n    displaytype: section\n</code></pre>"}]}